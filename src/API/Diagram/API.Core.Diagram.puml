@startuml
scale 1
' skinparam classAttributeIconSize 0

namespace API.Mail #DDDDDD {
    IMailAddress "2" *-- IMail
    IMessage "1" *-- IMail

    IContent <|-- IMessage
    IHeader <|-- IMessage
    IAddressee <|-- IMailAddress
    IAddress <|-- IMailAddress

    interface IAddress
    {
        + String Address 
    }
    interface IAddressee
    {
        + String Addressee
    } 

    interface IMailAddress
    {
    }

    interface IHeader
    {
        + String Header 
    }
    interface IContent
    {
        + JSON Content
    }
    interface IMessage
    {
    }
    interface IMail
    {
        + IMailAddress reciever
        + IMailAddress sender
        + IMessage message
    }
}

namespace API.Send #DDDDDD {
    interface IMailSender
    {
        + MailPicker mailPicker
        + void send(IMail)
    }
    class MailPicker << (S,#FF7700) Singleton >>
    {
        - List<IPostSender> sendes
        + void refreshSenders()

        + void send(IMail)
    }
    interface IPostSender
    {
        + void init()
        + void send(IMail)
    }
    class MailSenderFactrory
    {
        + List<IMailSenderClass> scan()
        + List<IMailSender> createIntances(List<IMailSenderClass>)
    }
    class PostSenderFactrory
    {
        + List<IPostSenderClass> scan()
        + List<IPostSenderClass> testConnection(List<IPostSenderClass>)
        + List<IPostSender> createIntances(List<IPostSenderClass>)
    }

    MailSenderFactrory -> IMailSender
    IMailSender ..> API.Mail.IMail
    IMailSender "many" --* MailPicker :send
    MailPicker --> API.Mail.IMail
    MailPicker --o PostSenderFactrory
    MailPicker --o "many" IPostSender :refreshSenders
    API.Mail.IMail <-- IPostSender
    IPostSender -> PostSenderFactrory
}


namespace API.Receive #DDDDDD {
    interface IMailReceiver
    {
        + void receive(IMail)
    }
    class MailSorter << (S,#FF7700) Singleton >>
    {
        - List<IPostReceiver> recieves
        - List<IMailReceiver> recipients
        + void refreshReceivers()
 
        + void registerRecipient(IMailReceiver)
        + void deleteRecipient(IMailReceiver)

       + void receive(IMail)
    }
    interface IPostReceiver
    {
        + IMailReceiver MailReceiver
        + void init(MailSorter)
        + void received(IMail)
    }
    class MailReceiverFactrory
    {
        + List<IMailReceiverClass> scan()
        + List<IMailReceiver> createIntances(List<IMailReceiverClass>)
    }
    class PostReceiverFactrory
    {
        + List<IPostReceiverClass> scan()
        + List<IPostReceiverClass> testConnection(List<IPostReceiverClass>)
        + List<IPostReceiver> createIntances(List<IPostReceiverClass>)
    }

    IMailReceiver -> MailReceiverFactrory
    IMailReceiver --> API.Mail.IMail
    IMailReceiver "many" o-- MailSorter : registerRecipient
    MailSorter --> API.Mail.IMail
    MailSorter --o PostReceiverFactrory
    MailSorter --o "many" IPostReceiver : refreshReceivers
    API.Mail.IMail <-- IPostReceiver
    IPostReceiver -> PostReceiverFactrory
}







' interface IMailHandler
' {
' }
' IMailHandler <|-- IMailReceiver
' IMailHandler <|-- IMailSender

' interface IPostHandler
' {
' }
' IPostReceiver --|> IPostHandler
' IPostSender  --|> IPostHandler

@enduml